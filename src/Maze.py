import turtle as tt
import random
import time
import pytest


def genc(le):
    l = []
    for i in range(le):
        l.append(i*10)
        l.append(i*10)
        l.append(-i*10)
        l.append(-i*10)
    l.pop(0)
    l.pop(0)
    tl = []
    for xi in range(len(l)-1):
        # print(l[xi])
        tl.append([l[xi], l[xi+1]])
    return(tl)


def drawseg(l):
    # print(l)
    tt.speed(0)
    tt.pu()
    tt.goto(l[0][0], l[0][1])
    tt.pd()
    for a, b in l[1:]:
        tt.goto(a, b)


# drawseg(genc(4))

mid = [ [0, 0], [0, 10], [10, 10], [10, -10], [-10, -10], [-10, 20],
        [20, 20], [20, -20], [-20, -20], [-20, 30], [30, 30],
        [30, -30], [-30, -30]
      ]

mid_solution =  [    [5, 5], [5, -5], [-5, -5], [-5, 15], [15, 15],
                    [15, -15], [-15, -15], [-15, 25], [25, 25], 
                    [25, -25], [-25, -25]
                ]


def draw_random(l):
    x = x = 10*l
    random_list = [   
        (   
            [   
                [-(30+x), -(30+x)], [-(30+x), (40+x)], [-5, (40+x)], 
                [-5, (50+x)], [-(40+x), (50+x)], [-(40+x), 5], 
                [-(50+x), 5], [-(50+x), (60+x)], [(60+x), (60+x)], 
                [(60+x), 5], [(50+x), 5], [(50+x), (50+x)], 
                [5, (50+x)], [5, (40+x)], [(40+x), (40+x)], 
                [(40+x), -(40+x)], [10, -(40+x)], [10, -(50+x)], 
                [(50+x), -(50+x)], [(50+x), -5], [(60+x), -5], 
                [(60+x), -(60+x)], [0, -(60+x)], [0, -(40+x)], 
                [-(40+x), -(40+x)], [-(40+x), -5], [-(50+x), -5], 
                [-(50+x), -(50+x)], [-10, -(50+x)], [-10, -(60+x)], 
                [-(60+x), -(60+x)]
            ], 
            l+3, 
            "layer 1", 
            (1, 0, 0), 
            [   
                [-(25+x), -(25+x)], [-(25+x), (35+x)],  
                [(35+x), (35+x)], [(35+x), -(35+x)], 
                [-(35+x), -(35+x)], [-(35+x), 0], 
                [-(55+x), 0], [-(55+x), -(55+x)]
            ]
        ), 
        (   [   
                [-(30+x), -(30+x)], [-(30+x), -5], [-(40+x), -5], 
                [-(40+x), -(40+x)], [-10, -(40+x)], [-10, -(50+x)], 
                [-(50+x), -(50+x)], [-(50+x), (60+x)], [60+x, 60+x], 
                [60+x, -(60+x)], [10, -(60+x)], [10, -(50+x)], 
                [50+x, -(50+x)], [50+x, 50 + x], [-(40+x), 50+x], 
                [-(40+x), 5], [-(30+x), 5], [-(30+x), 40+x], 
                [40+x, 40+x], [40+x, -(40+x)], [0, -(40+x)], 
                [0, -(60+x)], [-(60+x), -(60+x)]
            ], 
            l+3,  
            "layer 2", 
            (0, 1, 0), 
            [   
                [-(25+x), -(25+x)], [-(25+x), 0], [-(25+x), (35+x)], 
                [(35+x), (35+x)], [(35+x), -(35+x)], 
                [-5, -(35+x)], [-5, -(55+x)], [-(55+x), -(55+x)]
            ]
        ),
        (   [   
                [-(30+x), -(30+x)], [-(30+x), (40+x)], 
                [(40+x), (40+x)], [(40+x), -(40+x)], 
                [-(40+x), -(40+x)], [-(40+x), (50+x)], 
                [(50+x), (50+x)], [(50+x), -(50+x)], 
                [-(50+x), -(50+x)]
            ], 
            l+2, 
            "layer 3", 
            (0.5, 0.5, 0.5), 
            [   
                [-(25+x), -(25+x)], [-(25+x), (35+x)], [(35+x), (35+x)], 
                [(35+x), -(35+x)], [-(35+x), -(35+x)], 
                [-(35+x), (45+x)], [(45+x), (45+x)], [(45+x), -(45+x)], 
                [-(45+x), -(45+x)]
            ]
        ), 
        (   [   
                [-(30+x), -(30+x)], [-(30+x), 0], [-(60+x), 0], 
                [-(60+x), -(60+x)], [-10, -(60+x)], [-10, -(50+x)], 
                [-(50+x), -(50+x)], [-(50+x), -10], [-(40+x), -10], 
                [-(40+x), -(40+x)], [0, -(40+x)], [0, -(60+x)], 
                [(60+x), -(60+x)], [(60+x), -10], [(50+x), -10], 
                [(50+x), -(50+x)], [10, -(50+x)], [10, -(40+x)], 
                [(40+x), -(40+x)], [(40+x), (40+x)], [0, (40+x)], 
                [0, (70+x)], [(70+x), (70+x)], [(70+x), 10], 
                [(60+x), 10], [(60+x), (60+x)], [10, (60+x)], 
                [10, (50+x)], [(50+x), (50+x)], [(50+x), 0],
                [(70+x), 0], [(70+x), -(70+x)], [-(70+x), -(70+x)], 
                [-(70+x), (80+x)], [-20, (80+x)], [-20, (70+x)], 
                [-(60+x), (70+x)], [-(60+x), 10], [-(50+x), 10], 
                [-(50+x), (60+x)], [-20, (60+x)], [-20, (50+x)], 
                [-(40+x), (50+x)], [-(40+x), 10], [-(30+x), 10], 
                [-(30+x), (40+x)], [-10, (40+x)], [-10, (80+x)], 
                [(80+x), (80+x)], [(80+x), -(80+x)], [-(80+x), -(80+x)]
            ], 
            l+5, 
            "layer-4", 
            (0, 0, 1), 
            [   
                [-(25+x), -(25+x)], [-(25+x), (35+x)], [-5, (35+x)], 
                [-5, (75+x)], [(75+x), (75+x)], [(75+x), -(75+x)], 
                [-(75+x), -(75+x)]
            ]
        )
    ]
    return random.choice(random_list)


def generate(layers):
    tt.reset()
    tt.pensize(3)
    tt.speed(0)
    maize_list = []
    solution_list = mid_solution
    drawseg(mid)
    n = 0
    for i in range(layers):
        (m, n, p, c, s) = draw_random(n)

        tt.pencolor(c)
        drawseg(m)
        print(n, p)
        maize_list = maize_list + m
        solution_list = solution_list + s
        if n > 30:
            break
    print(maize_list)
    tt.pensize(1)
    tt.pencolor(0.7, 0, 0)
    time.sleep(1.5)
    tt.speed(2)
    drawseg(solution_list)


# for i in range(9):
#     generate(15)
# generate(10)

# tt.exitonclick()

# print(genc(1))